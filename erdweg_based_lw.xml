<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<featureModel>
	<properties>
		<graphics key="autolayoutconstraints" value="false"/>
		<graphics key="legendautolayout" value="true"/>
		<graphics key="showconstraints" value="true"/>
		<graphics key="showshortnames" value="false"/>
		<graphics key="layout" value="horizontal"/>
		<graphics key="showcollapsedconstraints" value="true"/>
		<graphics key="legendhidden" value="false"/>
		<graphics key="layoutalgorithm" value="1"/>
	</properties>
	<struct>
		<and abstract="true" mandatory="true" name="Language Workbench">
			<graphics key="collapsed" value="false"/>
			<and abstract="true" name="Meta-DSL">
				<description>Features concerning the met-DSL(s) present inside the language workbench.</description>
				<or abstract="true" mandatory="true" name="Notation">
					<description>The form of the concrete syntax.</description>
					<graphics key="collapsed" value="false"/>
					<and name="Textual">
						<feature name="Symbols"/>
					</and>
					<feature name="Graphical"/>
					<feature name="Tabular"/>
					<feature name="Block">
						<description>Example: Scratch.</description>
					</feature>
					<feature name="Form"/>
				</or>
				<or abstract="true" mandatory="true" name="Editing Approach">
					<description>How a language designer interacts with the meta-DSLs to edit the metamodels.</description>
					<feature name="Projectional approach">
						<description>
							Approach where the model is "projected", i.e. completely computed from the abstract syntax, to the user.
							The user directly edit the abstract syntax by completing cells present in the abstract syntaxin the manner of a gap-fill text.
							The concrete syntax is not editable and then not persited.
							Example: MPS, Freon.
						</description>
					</feature>
					<feature name="Parser approach">
						<description>
							Approach where the concrete syntax is parsed to compute the related abstract syntax.
							Example: Xtext, Langium.
						</description>
					</feature>
				</or>
			</and>
			<and abstract="true" name="Testing">
				<feature name="DSL debugging"/>
				<feature name="DSL testing"/>
			</and>
			<and abstract="true" name="Runtime environment">
				<description>Where the language workbench is running.</description>
				<graphics key="collapsed" value="false"/>
				<feature name="Eclipse"/>
				<feature name="Web"/>
			</and>
			<and abstract="true" mandatory="true" name="Definition">
				<or abstract="true" name="Validation">
					<feature name="Structural"/>
					<or abstract="true" name="Semantic">
						<feature name="Naming"/>
						<feature name="Types"/>
						<feature name="Programmatic"/>
					</or>
				</or>
				<and abstract="true" name="Composability">
					<description>A language workbench provides composition features if it's enable the reuse of (part of) other languages to create a new language.</description>
					<alt abstract="true" mandatory="true" name="Concern">
						<description>The composition concern is which part(s) of a language or a modeling workbench can be reused to create another language or modeling workbench.</description>
						<feature name="Syntax/view"/>
						<feature name="Compose validation"/>
						<feature name="Compose semantics"/>
						<feature name="Editor Services"/>
					</alt>
					<alt abstract="true" mandatory="true" name="Operator">
						<description>The composition operator is an operator taking one or several languages to compose a new language.</description>
						<feature name="Module/Lib import"/>
						<feature name="Reuse"/>
						<feature name="Extension"/>
						<feature name="Unification"/>
						<feature name="Extension Composition"/>
						<feature name="Restriction"/>
						<feature name="Inheritance"/>
						<feature name="Embedding"/>
					</alt>
				</and>
				<alt abstract="true" name="DSL Type">
					<graphics key="collapsed" value="false"/>
					<feature name="Internal">
						<description>
							An internal DSL is a language that can be only used inside another language.
							Example: libraries, fluent API, …
							Language workbench examples: CEDALION, Racket
						</description>
					</feature>
					<feature name="External">
						<description>
							An external DSL is a langage with isn't inside another language, has its own tooling, and do depend of the one of a host language.
							Language workbench examples: Xtext, Langium, Sirius Web, …
						</description>
					</feature>
					<feature name="Embed">
						<description>
							An embed DSL is an external language that can be used inside another language through an integration.
							Example: SQL can be used in Java through libraries or interpreted (and tooled) language.
						</description>
					</feature>
				</alt>
				<or abstract="true" mandatory="true" name="Semantics">
					<or abstract="true" name="Translational">
						<feature name="M2T"/>
						<and name="M2M">
							<feature name="Concrete syntax"/>
						</and>
					</or>
					<feature name="Interpretative"/>
				</or>
				<and abstract="true" mandatory="true" name="Editor Definition">
					<graphics key="collapsed" value="false"/>
					<or abstract="true" mandatory="true" name="Editing mode">
						<feature name="Free-form"/>
						<feature name="Projectional"/>
					</or>
					<or abstract="true" name="Syntactic services">
						<feature name="Highlighting"/>
						<feature name="Outline"/>
						<feature name="Folding"/>
						<feature name="Syntactic completion"/>
						<feature name="Diff"/>
						<feature name="Auto-formatting"/>
						<feature name="Scope"/>
					</or>
					<or abstract="true" name="Semantic services">
						<feature name="Reference resolution"/>
						<feature name="Semantic completion"/>
						<feature name="Refactoring"/>
						<feature name="Error marking"/>
						<feature name="Quick fixes"/>
						<feature name="Origin tracking"/>
						<feature name="Live translation"/>
					</or>
					<feature abstract="true" name="Collaboration"/>
				</and>
			</and>
			<or abstract="true" name="Extension mechanism">
				<description>How the language workbench can be extended with new features.</description>
				<feature name="Library"/>
				<feature name="API"/>
			</or>
		</and>
	</struct>
</featureModel>
